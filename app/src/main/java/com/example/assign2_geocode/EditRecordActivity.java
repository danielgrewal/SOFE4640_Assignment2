package com.example.assign2_geocode;

import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

public class EditRecordActivity extends AppCompatActivity {
    private TextView title;
    private TextView idTextView;
    private EditText addressEditText;
    private EditText latitudeEditText;
    private EditText longitudeEditText;
    private Button saveButton;
    private Button backButton;
    private Button deleteButton;
    private DatabaseHelper dbHelper;
    private SQLiteDatabase db;
    private int recordId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_edit_record);

        // Init components
        title = findViewById(R.id.titleEditRecord);
        idTextView = findViewById(R.id.textViewRecordId);
        addressEditText = findViewById(R.id.editTextAddress);
        latitudeEditText = findViewById(R.id.editTextLatitude);
        longitudeEditText = findViewById(R.id.editTextLongitude);
        saveButton = findViewById(R.id.buttonSave);
        deleteButton = findViewById(R.id.buttonDelete);
        backButton = findViewById(R.id.buttonBack);

        // Initialize the DatabaseHelper and get a writable database
        dbHelper = new DatabaseHelper(this);
        db = dbHelper.getWritableDatabase();

        // Retrieve the selected record's data from the intent extras
        Intent intent = getIntent();

        if (intent != null) {
            recordId = intent.getIntExtra("recordId", -1);
            System.out.println("DEBUG EXISTING ENTRY id is - " + recordId);

            if (intent.hasExtra("selectedRecord")) {
                String selectedRecord = intent.getStringExtra("selectedRecord");
                // Split the selected record into individual fields
                String[] recordFields = selectedRecord.split("\n");

                if (recordFields.length >= 4) {
                    String address = recordFields[1].replace("Address: ", "");
                    String latitude = recordFields[2].replace("Latitude: ", "");
                    String longitude = recordFields[3].replace("Longitude: ", "");

                    // Populate the views with the selected record's data
                    idTextView.setText("ID: " + String.valueOf(recordId));
                    addressEditText.setText(address);
                    latitudeEditText.setText(latitude);
                    longitudeEditText.setText(longitude);
                }
            } else if (intent.hasExtra("recordId")) {
                if (recordId == -1) {
                    // update activity title on UI for a new entry:
                    title.setText("New Entry");
                    // Display "NEW" when it's a new entry
                    idTextView.setText("ID will be auto generated by the database");
                    // Hide the delete button for new entries
                    deleteButton.setVisibility(View.GONE);
                } else {
                    idTextView.setText("ID: " + String.valueOf(recordId));
                }
            }
        }

        // Implement the saveButton click listener to save the edited data
        saveButton.setOnClickListener(view -> {
            // Get the data that the user changed from the EditText views
            String editedAddress = addressEditText.getText().toString();
            String editedLatitude = latitudeEditText.getText().toString();
            String editedLongitude = longitudeEditText.getText().toString();

            // Ensure the latitude and longitude are not empty
            if (!editedLatitude.isEmpty() && !editedLongitude.isEmpty()) {
                // Convert latitude and longitude to double
                double editedLatitudeValue = Double.parseDouble(editedLatitude);
                double editedLongitudeValue = Double.parseDouble(editedLongitude);

                if (recordId == -1) {
                    // This is a new entry, so insert a new record into the database
                    long newRecordId = dbHelper.insertRecord(db, editedAddress, editedLatitudeValue, editedLongitudeValue);
                    if (newRecordId != -1) {
                        // Successfully inserted the new record
                        Toast.makeText(EditRecordActivity.this, "New record added!", Toast.LENGTH_SHORT).show();
                    } else {
                        // Failed to insert the new record
                        Toast.makeText(EditRecordActivity.this, "Failed to add a new record", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    // Update the existing record in the database using the DatabaseHelper
                    int rowsUpdated = dbHelper.updateRecord(db, recordId, editedAddress, editedLatitudeValue, editedLongitudeValue);

                    if (rowsUpdated > 0) {
                        // Successfully updated the record
                        Toast.makeText(EditRecordActivity.this, "Record updated!", Toast.LENGTH_SHORT).show();
                    } else {
                        // Failed to update the record
                        Toast.makeText(EditRecordActivity.this, "Failed to update the record", Toast.LENGTH_SHORT).show();
                    }
                }
            } else {
                // Latitude or longitude is empty
                Toast.makeText(EditRecordActivity.this, "Latitude and Longitude are required", Toast.LENGTH_SHORT).show();
            }

            // Go back to the previous activity to view the entries list
            onBackPressed();
        });

        // Delete button click listener
        deleteButton.setOnClickListener(view -> {
            // Call a method to delete the record from the database
            boolean deleted = dbHelper.deleteRecord(db, recordId);

            if (deleted) {
                // Successfully deleted the record
                Toast.makeText(EditRecordActivity.this, "Record deleted!", Toast.LENGTH_SHORT).show();
            } else {
                // Failed to delete the record
                Toast.makeText(EditRecordActivity.this, "Failed to delete the record", Toast.LENGTH_SHORT).show();
            }

            // Navigate back to the previous activity (DatabaseActivity)
            onBackPressed();
        });

        // Set an onClick listener for the Back button
        backButton.setOnClickListener(v -> {
            onBackPressed(); // Navigate back to the previous screen
        });
    }
}
